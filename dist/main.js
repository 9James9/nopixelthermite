/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("const winMenu = document.querySelector('[data-win-menu]')\nconst endMenu = document.querySelector('[data-end-menu]')\nconst log = console.log\nconst startBtn = document.querySelector('[data-start-button]')\nconst gridContainer = document.querySelector('[data-grid-container]')\nconst decreaseGridSizeButton = document.querySelector('[data-decrease-grid-size]')\nconst decreaseDifficultyButton = document.querySelector('[data-decrease-grid-difficulty]')\nconst increaseDifficultyButton = document.querySelector('[data-increase-grid-difficulty]')\nconst increaseGridSizeButton = document.querySelector('[data-increase-grid-size]')\nconst difficultyDisplay = document.querySelector('[data-difficulty]')\ndocument.querySelector('[data-end-play-again]').addEventListener('click', () => {\n    endMenu.style.display = 'none'\n\n})\ndocument.querySelector('[data-win-play-again]').addEventListener('click', () => {\n    winMenu.style.display = 'none'\n\n})\nincreaseGridSizeButton.addEventListener('click', () => {\n    changeGridSize(50)\n    gridContainer.textContent = \"\"\n    makeBlocks(6)\n})\ndecreaseGridSizeButton.addEventListener('click', () => {\n    changeGridSize(-50)\n    gridContainer.textContent = \"\"\n    makeBlocks(6)\n})\ndecreaseDifficultyButton.addEventListener('click', () => {\n    changeDifficulty(-1)\n    displayDifficulty()\n})\nincreaseDifficultyButton.addEventListener('click', () => {\n    changeDifficulty(1)\n    displayDifficulty()\n})\nstartBtn.addEventListener('click', playRound)\nendMenu.style.display = 'none'\n\nlet gridSize = 6\nlet maxWidth = 300\nlet allBoxes = []\nlet unchangedAllBoxes = []\nlet selectedBoxes = []\nlet difficulty = 5\nfunction displayDifficulty(){\n    return difficultyDisplay.textContent = `Difficulty: ${difficulty}`\n}\nfunction changeGridSize(increment) {\n    return maxWidth += increment\n}\nfunction changeDifficulty(increment) {\n    return difficulty += increment\n}\nfunction playRound() {\n    unchangedAllBoxes = []\n    selectedBoxes = []\n    gridContainer.textContent = \"\"\n    makeBlocks(gridSize)\n    selectBoxes(difficulty)\n    classes()\n}\n\nfunction makeBlocks(size) {\n    displayDifficulty()\n    for (let i = 0; i < size; i++) {\n        let row = document.createElement('div');\n        row.className = \"row\";\n\n        for (let j = 0; j < size; j++) {\n            let box = document.createElement('div');\n            box.className = `box-${i}${j}`\n            box.classList.add('box')\n            allBoxes.push(`box-${i}${j}`)\n            unchangedAllBoxes.push(`box-${i}${j}`)\n            row.appendChild(box);\n        }\n        document.getElementById('grid-container').appendChild(row);\n\n        var boxes = document.getElementsByClassName(\"box\");\n        for (let k = 0; k < boxes.length; k++) {\n            boxes[k].style.width = maxWidth / size + \"px\";\n            boxes[k].style.height = maxWidth / size + \"px\";\n        }\n    }\n    return allBoxes\n}\n\nfunction random(num) {\n    return Math.floor(Math.random() * num)\n}\n\nfunction selectBoxes(difficulty) {\n\n    for (let i = 0; i < difficulty; i++) {\n        selectedBoxes.push(allBoxes[random(allBoxes.length)])\n        document.querySelector(`.${selectedBoxes[i]}`).classList.add('red')\n        sleep(1000).then(() => {\n            document.querySelector(`.${selectedBoxes[i]}`).classList.remove('red')\n            document.querySelector(`.${selectedBoxes[i]}`).classList.add('selected')\n            allBoxes.splice(i, 1)\n        })\n\n\n    }\n    return selectedBoxes\n}\n\n//remove duplicates in selectedBoxes\n// uniqueArray = [...new Set(selectedBoxes)]\n\nfunction classes() {\n    let score = 3\n    log(unchangedAllBoxes)\n    for (let i = 0; i < unchangedAllBoxes.length; i++) {\n        let thebox = document.querySelector(`.${unchangedAllBoxes[i]}`)\n        document.querySelector(`.${unchangedAllBoxes[i]}`).addEventListener('click', () => {\n            if (thebox.classList.contains('selected')) {\n                choose(thebox)\n                check()\n            } else if (thebox.classList.contains('selected1')) {\n                //if it was already selected\n            } else {\n                score -= 1\n                wrongChoice(thebox)\n                if (score <= 0) {\n                    sleep(500).then(() => {\n                        endMenu.style.display = 'flex'\n                        //shows the boxes you missed after you lose\n                        for (let i = 0; i < unchangedAllBoxes.length; i++) {\n                            if (document.querySelector(`.${unchangedAllBoxes[i]}`).classList.contains('selected')) {\n                                document.querySelector(`.${unchangedAllBoxes[i]}`).classList.add('red')\n                            }\n                        }\n                    })\n                    //make start screen show up here\n                }\n            }\n        })\n    }\n}\n\nfunction choose(el) {\n    el.classList.add(\"selected1\");\n    el.classList.remove('selected')\n}\n\nfunction wrongChoice(el) {\n    el.classList.add('wrongchoice')\n}\n\nfunction check() {\n    //checks the classes on all boxes, returns if one still has the selected class. and announces winner if it can finish the loop\n    for (let i = 0; i < unchangedAllBoxes.length; i++) {\n        if (document.querySelector(`.${unchangedAllBoxes[i]}`).classList.contains('selected')) {\n            return false\n        }\n    }\n    winMenu.style.display = \"flex\"\n    //localstorage to keep track of completions?\n}\n\nfunction sleep(time) {\n    return new Promise((resolve) => setTimeout(resolve, time));\n}\n\nmakeBlocks(6)\n\n//# sourceURL=webpack://nopixelthermite/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;